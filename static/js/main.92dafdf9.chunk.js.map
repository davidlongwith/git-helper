{"version":3,"sources":["components/Header.js","components/QuickLink.js","components/QuickLinks.js","components/Command.js","components/CommandGroup.js","components/Commands.js","components/ScrollToTop.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","QuickLink","sectionName","href","toLowerCase","replace","QuickLinks","sections","id","map","section","i","key","name","Command","code","description","CommandGroup","commands","command","Commands","commandData","commandGroup","ScrollToTop","props","state","is_visible","scrollComponent","this","document","addEventListener","e","toggleVisibility","window","pageYOffset","setState","scrollTo","top","behavior","onClick","scrollToTop","role","aria-labelledby","xmlns","viewBox","data-name","d","Component","App","commandsByGroupArray","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","data","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.92dafdf9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <header className=\"app-header\">\r\n    <h1>Git Helper</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// sectionName prop is used for the Quick Link name,\r\n// and is formatted to match section id's for link destination\r\nconst QuickLink = ({ sectionName }) => (\r\n  <li>\r\n    <a\r\n      className=\"quick-link\"\r\n      href={`#${sectionName.toLowerCase().replace(/ /g, \"-\")}`}\r\n    >\r\n      {sectionName}\r\n    </a>\r\n  </li>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nQuickLink.propTypes = {\r\n  sectionName: PropTypes.string\r\n};\r\n\r\nexport default QuickLink;\r\n","import React from \"react\";\r\nimport \"../css/QuickLinks.css\";\r\nimport QuickLink from \"./QuickLink.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Iterate through each object in the sections prop assigning each\r\n// section's name as a prop for the QuickLink component.\r\nconst QuickLinks = ({ sections }) => (\r\n  <nav id=\"quick-link-navigation\">\r\n    <h2 className=\"quicklinks-header\">QuickLinks</h2>\r\n    <ul>\r\n      {sections.map((section, i) => (\r\n        <QuickLink key={i} sectionName={section.name} />\r\n      ))}\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nQuickLinks.propTypes = {\r\n  sections: PropTypes.array\r\n};\r\n\r\nexport default QuickLinks;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// assemble a single command using Command component props\r\nconst Command = ({ code, description }) => (\r\n  <div className=\"command\">\r\n    <div className=\"command-code\">\r\n      <code>{code}</code>\r\n    </div>\r\n    <div className=\"command-descrip\">\r\n      <p>{description}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nCommand.propTypes = {\r\n  code: PropTypes.string,\r\n  description: PropTypes.string\r\n};\r\n\r\nexport default Command;\r\n","import React from \"react\";\r\nimport Command from \"./Command.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Each command group gets a unique id based on group name.  Add all properties\r\n// for individual commands to the Command component using the JSX spread operator.\r\nconst CommandGroup = ({ name, commands }) => (\r\n  <section id={name.toLowerCase().replace(/ /g, \"-\")} className=\"command-group\">\r\n    <h2>{name}</h2>\r\n    <div>\r\n      {commands.map((command, i) => (\r\n        <Command key={i} {...command} />\r\n      ))}\r\n    </div>\r\n  </section>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nCommandGroup.propTypes = {\r\n  name: PropTypes.string,\r\n  commands: PropTypes.array\r\n};\r\n\r\nexport default CommandGroup;\r\n","import React from \"react\";\r\nimport CommandGroup from \"./CommandGroup.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Iterate through each object in the commandData array for use in the\r\n// CommandGroup component.  For each iteration, all properties of the object\r\n// are added as props using the JSX spread operator.\r\nconst Commands = ({ commandData }) => (\r\n  <div className=\"commands\">\r\n    {commandData.map((commandGroup, i) => (\r\n      <CommandGroup key={i} {...commandGroup} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nCommands.propTypes = {\r\n  commandData: PropTypes.array\r\n};\r\n\r\nexport default Commands;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/ScrollToTop.css\";\r\n\r\n// Button that scrolls to top of page.\r\n//\r\n// Code assist:\r\n// https://www.coderomeos.org/scroll-to-top-of-the-page-a-simple-react-component\r\n//\r\nexport default class ScrollToTop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      is_visible: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var scrollComponent = this;\r\n    document.addEventListener(\"scroll\", function(e) {\r\n      scrollComponent.toggleVisibility();\r\n    });\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (window.pageYOffset > 300) {\r\n      this.setState({\r\n        is_visible: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        is_visible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  scrollToTop() {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { is_visible } = this.state;\r\n    return (\r\n      <div className=\"scroll-top-button-div\">\r\n        {is_visible && (\r\n          <button\r\n            className=\"scroll-top-button\"\r\n            onClick={() => this.scrollToTop()}\r\n          >\r\n            <i className=\"i-arrow-up\">\r\n              <svg\r\n                role=\"img\"\r\n                aria-labelledby=\"arrowUpIcon\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 48.77 25.39\"\r\n              >\r\n                <title id=\"arrowUpIcon\">arrow-up</title>\r\n                <g data-name=\"Layer 2\">\r\n                  <g data-name=\"Layer 1\">\r\n                    <path d=\"M47.77,25.39a1,1,0,0,1-.71-.29L24.39,2.41,1.71,25.09A1,1,0,0,1,.29,23.68L23.68.29a1,1,0,0,1,1.41,0L48.48,23.68a1,1,0,0,1-.71,1.71Z\"></path>\r\n                  </g>\r\n                </g>\r\n              </svg>\r\n            </i>\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./css/App.css\";\r\nimport Header from \"./components/Header.js\";\r\nimport QuickLinks from \"./components/QuickLinks.js\";\r\nimport Commands from \"./components/Commands.js\";\r\nimport ScrollToTop from \"./components/ScrollToTop.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// The commandsByGroupArray prop contains the entire data array from commands.json\r\nfunction App({ commandsByGroupArray }) {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <QuickLinks sections={commandsByGroupArray} />\r\n      <Commands commandData={commandsByGroupArray} />\r\n      <ScrollToTop />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Typechecking with PropTypes\r\nApp.propTypes = {\r\n  commandsByGroupArray: PropTypes.array\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\nimport data from \"./data/commands\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// Add commands.json data to the App component as prop\r\nReactDOM.render(\r\n  <App commandsByGroupArray={data} />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}