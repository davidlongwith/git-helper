{"version":3,"sources":["components/QuickLinks.js","components/Command.js","components/CommandGroup.js","App.js","serviceWorker.js","index.js"],"names":["QuickLinks","sectionName","className","href","toLowerCase","replace","Command","code","description","CommandGroup","name","commands","id","map","command","i","key","App","commandData","commandGroup","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","data","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"s1MAqBeA,G,iBAhBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACjB,4BACE,uBACEC,UAAU,aACVC,KAAI,WAAMF,EAAYG,cAAcC,QAAQ,KAAM,OAEjDJ,MCUQK,EAjBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACd,yBAAKN,UAAU,WACb,yBAAKA,UAAU,gBACb,8BAAOK,IAET,yBAAKL,UAAU,mBACb,2BAAIM,MCiBKC,EAtBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACnB,6BAASC,GAAIF,EAAKN,cAAcC,QAAQ,KAAM,KAAMH,UAAU,iBAC5D,4BAAKQ,GAML,6BACGC,EAASE,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,EAAD,eAASC,IAAKD,GAAOD,UC+BdG,MAtCf,YAA+B,IAAhBC,EAAe,EAAfA,YACb,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAOF,yBAAKU,GAAG,yBACN,4BACGM,EAAYL,KAAI,SAACM,EAAcJ,GAAf,OACf,kBAAC,EAAD,CAAYC,IAAKD,EAAGd,YAAakB,EAAaT,YAUpD,yBAAKR,UAAU,YACZgB,EAAYL,KAAI,SAACM,EAAcJ,GAAf,OACf,kBAAC,EAAD,eAAcC,IAAKD,GAAOI,U,OCtB9BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCxFjEC,IAASC,OAAO,kBAAC,EAAD,CAAK7B,YAAa8B,IAAUC,SAASC,eAAe,SDc7D,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,cAAwB9B,OAAOC,SAASpB,MACpDkD,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,cAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.b3407003.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// sectionName prop used for jump link name,\r\n// and is formatted to match section id's for link destination\r\nconst QuickLinks = ({ sectionName }) => (\r\n  <li>\r\n    <a\r\n      className=\"quick-link\"\r\n      href={`#${sectionName.toLowerCase().replace(/ /g, \"-\")}`}\r\n    >\r\n      {sectionName}\r\n    </a>\r\n  </li>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nQuickLinks.propTypes = {\r\n  sectionName: PropTypes.string\r\n};\r\n\r\nexport default QuickLinks;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// assemble a single command using Command component props\r\nconst Command = ({ code, description }) => (\r\n  <div className=\"command\">\r\n    <div className=\"command-code\">\r\n      <code>{code}</code>\r\n    </div>\r\n    <div className=\"command-descrip\">\r\n      <p>{description}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nCommand.propTypes = {\r\n  code: PropTypes.string,\r\n  description: PropTypes.string\r\n};\r\n\r\nexport default Command;\r\n","import React from \"react\";\r\nimport Command from \"./Command.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Each section of commands has a name/title and array of commands passed as props\r\nconst CommandGroup = ({ name, commands }) => (\r\n  <section id={name.toLowerCase().replace(/ /g, \"-\")} className=\"command-group\">\r\n    <h2>{name}</h2>\r\n\r\n    {/*\r\n      Iterate through each command in the commands array, adding the properties of each\r\n      as props to Command component using the JSX spread operator.\r\n    */}\r\n    <div>\r\n      {commands.map((command, i) => (\r\n        <Command key={i} {...command} />\r\n      ))}\r\n    </div>\r\n  </section>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nCommandGroup.propTypes = {\r\n  name: PropTypes.string,\r\n  commands: PropTypes.array\r\n};\r\n\r\nexport default CommandGroup;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./QuickLinks.css\";\r\nimport QuickLinks from \"./components/QuickLinks.js\";\r\nimport CommandGroup from \"./components/CommandGroup.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// The commandData prop contains the entire data array from commands.json\r\nfunction App({ commandData }) {\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        <h1>Git Helper</h1>\r\n      </header>\r\n\r\n      {/*\r\n        Iterate through each object in the commandData array assigning each \r\n        command group's name as a prop for the QuickLinks component.\r\n       */}\r\n      <nav id=\"quick-link-navigation\">\r\n        <ul>\r\n          {commandData.map((commandGroup, i) => (\r\n            <QuickLinks key={i} sectionName={commandGroup.name} />\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n\r\n      {/*\r\n        Iterate through each object in the commandData array for use in the\r\n        CommandGroup component.  For each iteration, all properties of the object\r\n        are added as props using the JSX spread operator.\r\n       */}\r\n      <div className=\"commands\">\r\n        {commandData.map((commandGroup, i) => (\r\n          <CommandGroup key={i} {...commandGroup} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Typechecking with PropTypes\r\nApp.propTypes = {\r\n  commandData: PropTypes.array\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport data from \"./data/commands\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// Add commands.json data to the App component as prop\r\nReactDOM.render(<App commandData={data} />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}